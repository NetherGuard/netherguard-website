---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="Config Manager - NetherGuard">
  <!-- Hero Section -->
  <section class="section-spacing bg-gradient-to-br from-obsidian-900 via-zinc-900/20 to-obsidian-900">
    <div class="container">
      <div class="max-w-4xl mx-auto text-center mb-12">
        <div class="text-sm text-zinc-500 font-mono mb-4">~/config-manager</div>
        <h1 class="text-5xl md:text-6xl font-bold text-white mb-6 leading-tight">
          Config <span class="text-white">Manager</span>
        </h1>
        <p class="text-xl text-zinc-400 max-w-2xl mx-auto leading-relaxed">
          Build optimized plugin configurations with security presets and performance 
          tuning best practices included by default.
        </p>
      </div>
    </div>
  </section>

  <!-- Config Builder Section -->
  <section class="section-spacing bg-obsidian-800">
    <div class="container">
      <div class="max-w-4xl mx-auto space-y-12">
        
        <!-- Plugin Selection -->
        <div>
          <h2 class="text-2xl font-bold text-white mb-6">Choose Plugin</h2>
          <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
            
            <button class="plugin-card active" data-plugin="essentials">
              <div class="w-12 h-12 bg-white/10 border border-white/20 rounded-lg flex items-center justify-center mx-auto mb-3">
                <span class="text-white font-mono text-lg font-bold">01</span>
              </div>
              <h3 class="font-bold text-white mb-1">Essentials</h3>
              <p class="text-xs text-zinc-400">Basic plugin config</p>
            </button>

            <button class="plugin-card" data-plugin="worldguard">
              <div class="w-12 h-12 bg-white/10 border border-white/20 rounded-lg flex items-center justify-center mx-auto mb-3">
                <span class="text-white font-mono text-lg font-bold">02</span>
              </div>
              <h3 class="font-bold text-white mb-1">WorldGuard</h3>
              <p class="text-xs text-zinc-400">Region protection</p>
            </button>

            <button class="plugin-card" data-plugin="spigot">
              <div class="w-12 h-12 bg-white/10 border border-white/20 rounded-lg flex items-center justify-center mx-auto mb-3">
                <span class="text-white font-mono text-lg font-bold">03</span>
              </div>
              <h3 class="font-bold text-white mb-1">Spigot</h3>
              <p class="text-xs text-zinc-400">Server config</p>
            </button>

            <button class="plugin-card" data-plugin="bukkit">
              <div class="w-12 h-12 bg-white/10 border border-white/20 rounded-lg flex items-center justify-center mx-auto mb-3">
                <span class="text-white font-mono text-lg font-bold">04</span>
              </div>
              <h3 class="font-bold text-white mb-1">Bukkit</h3>
              <p class="text-xs text-zinc-400">Bukkit config</p>
            </button>

          </div>
        </div>

        <!-- Configuration Presets -->
        <div class="bg-obsidian-700/50 border border-zinc-800 rounded-xl p-6">
          <h3 class="text-xl font-bold text-white mb-4">Configuration Presets</h3>
          <p class="text-sm text-zinc-400 mb-6">Select a preset optimized for your server type</p>
          
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <button class="preset-card active" data-preset="survival">
              <h4 class="font-bold text-white mb-2">Survival Server</h4>
              <p class="text-xs text-zinc-400 mb-3">Optimized for survival gameplay with balanced settings</p>
              <div class="text-xs text-zinc-500">
                • Anti-grief protection<br>
                • Balanced economy<br>
                • Performance optimized
              </div>
            </button>

            <button class="preset-card" data-preset="creative">
              <h4 class="font-bold text-white mb-2">Creative Server</h4>
              <p class="text-xs text-zinc-400 mb-3">Creative building with world protection</p>
              <div class="text-xs text-zinc-500">
                • World protection<br>
                • Build permissions<br>
                • Fast interactions
              </div>
            </button>

            <button class="preset-card" data-preset="minigames">
              <h4 class="font-bold text-white mb-2">Minigames Server</h4>
              <p class="text-xs text-zinc-400 mb-3">High performance for multiple game modes</p>
              <div class="text-xs text-zinc-500">
                • High tick rate<br>
                • Quick restarts<br>
                • Memory optimization
              </div>
            </button>
          </div>
        </div>

        <!-- Custom Settings -->
        <div class="bg-obsidian-700/50 border border-zinc-800 rounded-xl p-6">
          <h3 class="text-xl font-bold text-white mb-4">Custom Settings</h3>
          
          <div class="space-y-6" id="customSettings">
            <!-- Settings will be populated by JS based on selected plugin -->
          </div>

          <button 
            id="generateConfigBtn"
            class="w-full px-6 py-3 bg-white hover:bg-zinc-200 text-black rounded-lg font-semibold transition-all duration-200 hover:scale-105 mt-6"
          >
            Generate Configuration
          </button>
        </div>

        <!-- Generated Configuration -->
        <div class="bg-obsidian-700/50 border border-zinc-800 rounded-xl p-6">
          <div class="flex justify-between items-center mb-6">
            <h3 class="text-xl font-bold text-white">Generated Configuration</h3>
            <div class="flex gap-2">
              <button 
                id="copyConfigBtn"
                class="px-4 py-2 bg-white/10 border border-white/20 hover:bg-white/20 text-white rounded-lg text-sm font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                disabled
                title="Copy configuration"
              >
                Copy Config
              </button>
              <button 
                id="downloadConfigBtn"
                class="px-4 py-2 bg-white/10 hover:bg-white/20 text-white rounded-lg text-sm font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                disabled
              >
                Download
              </button>
            </div>
          </div>

          <div id="configOutput" class="bg-obsidian-900 border border-zinc-700 rounded-lg p-4 font-mono text-sm text-zinc-300 min-h-[200px] max-h-[500px] overflow-y-auto">
            <div class="text-zinc-500 text-center py-8">
              Configure settings above to generate your config file
            </div>
          </div>
        </div>

      </div>
    </div>
  </section>

  <!-- Toast Notifications -->
  <div id="toastContainer" class="fixed top-4 right-4 z-50 space-y-2"></div>

  <!-- How it Works -->
  <section class="section-spacing bg-obsidian-900">
    <div class="container">
      <div class="max-w-4xl mx-auto">
        <h2 class="text-3xl font-bold text-white text-center mb-12">Configuration Features</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
          <div class="text-center">
            <div class="w-16 h-16 bg-white/10 rounded-xl flex items-center justify-center mx-auto mb-4">
              <div class="i-lucide-shield text-2xl text-white"></div>
            </div>
            <h3 class="text-xl font-bold text-white mb-2">Security First</h3>
            <p class="text-zinc-400">Built-in security best practices and anti-exploit measures included by default.</p>
          </div>
          
          <div class="text-center">
            <div class="w-16 h-16 bg-white/10 rounded-xl flex items-center justify-center mx-auto mb-4">
              <div class="i-lucide-zap text-2xl text-white"></div>
            </div>
            <h3 class="text-xl font-bold text-white mb-2">Performance</h3>
            <p class="text-zinc-400">Optimized settings for better TPS and reduced lag on your server.</p>
          </div>
          
          <div class="text-center">
            <div class="w-16 h-16 bg-white/10 rounded-xl flex items-center justify-center mx-auto mb-4">
              <div class="i-lucide-settings text-2xl text-white"></div>
            </div>
            <h3 class="text-xl font-bold text-white mb-2">Customizable</h3>
            <p class="text-zinc-400">Fine-tune every setting or use presets for quick deployment.</p>
          </div>
        </div>
      </div>
    </div>
  </section>
</BaseLayout>

<script>
  interface ConfigSetting {
    key: string;
    label: string;
    type: 'boolean' | 'number' | 'string' | 'select';
    default: any;
    description: string;
    options?: string[];
  }

  interface PluginConfig {
    name: string;
    filename: string;
    settings: ConfigSetting[];
  }

  class ConfigManager {
    private currentPlugin: string = 'essentials';
    private currentPreset: string = 'survival';
    private configs: Record<string, PluginConfig> = {
      essentials: {
        name: 'Essentials',
        filename: 'config.yml',
        settings: [
          { key: 'allow-direct-hat', label: 'Allow Direct Hat', type: 'boolean', default: true, description: 'Allow players to use /hat command directly' },
          { key: 'teleport-cooldown', label: 'Teleport Cooldown', type: 'number', default: 5, description: 'Cooldown in seconds for teleport commands' },
          { key: 'default-gamemode', label: 'Default Gamemode', type: 'select', default: 'survival', description: 'Default gamemode for new players', options: ['survival', 'creative', 'adventure', 'spectator'] },
          { key: 'protect-rails', label: 'Protect Rails', type: 'boolean', default: true, description: 'Prevent rail destruction' },
          { key: 'max-homes', label: 'Max Homes', type: 'number', default: 3, description: 'Maximum homes per player' },
          { key: 'spawn-on-join', label: 'Spawn on Join', type: 'boolean', default: false, description: 'Teleport to spawn on first join' }
        ]
      },
      worldguard: {
        name: 'WorldGuard',
        filename: 'config.yml',
        settings: [
          { key: 'use-regions', label: 'Use Regions', type: 'boolean', default: true, description: 'Enable region protection system' },
          { key: 'mob-damage', label: 'Mob Damage', type: 'boolean', default: true, description: 'Allow mob damage in protected regions' },
          { key: 'pvp', label: 'PvP Enabled', type: 'boolean', default: false, description: 'Allow PvP in protected regions' },
          { key: 'fire-spread', label: 'Fire Spread', type: 'boolean', default: false, description: 'Allow fire to spread' },
          { key: 'lava-fire', label: 'Lava Fire', type: 'boolean', default: false, description: 'Allow lava to create fire' },
          { key: 'lightning-fire', label: 'Lightning Fire', type: 'boolean', default: false, description: 'Allow lightning to create fire' }
        ]
      },
      spigot: {
        name: 'Spigot',
        filename: 'spigot.yml',
        settings: [
          { key: 'view-distance', label: 'View Distance', type: 'number', default: 10, description: 'Default view distance (lower = better performance)' },
          { key: 'mob-spawn-range', label: 'Mob Spawn Range', type: 'number', default: 8, description: 'Mob spawning range in chunks' },
          { key: 'entity-activation-range.animals', label: 'Animal Activation Range', type: 'number', default: 32, description: 'Range for animal AI activation' },
          { key: 'entity-activation-range.monsters', label: 'Monster Activation Range', type: 'number', default: 32, description: 'Range for monster AI activation' },
          { key: 'merge-radius.exp', label: 'XP Merge Radius', type: 'number', default: 3, description: 'Radius for merging XP orbs' },
          { key: 'save-user-cache-on-stop-only', label: 'Save User Cache on Stop', type: 'boolean', default: false, description: 'Only save user cache on server stop' }
        ]
      },
      bukkit: {
        name: 'Bukkit',
        filename: 'bukkit.yml',
        settings: [
          { key: 'spawn-limits.monsters', label: 'Monster Spawn Limit', type: 'number', default: 70, description: 'Maximum monsters per world' },
          { key: 'spawn-limits.animals', label: 'Animal Spawn Limit', type: 'number', default: 10, description: 'Maximum animals per world' },
          { key: 'chunk-gc.period-in-ticks', label: 'Chunk GC Period', type: 'number', default: 600, description: 'Garbage collection period in ticks' },
          { key: 'ticks-per.animal-spawns', label: 'Animal Spawn Ticks', type: 'number', default: 400, description: 'Ticks between animal spawns' },
          { key: 'ticks-per.monster-spawns', label: 'Monster Spawn Ticks', type: 'number', default: 1, description: 'Ticks between monster spawns' },
          { key: 'allow-end', label: 'Allow End', type: 'boolean', default: true, description: 'Enable the End dimension' }
        ]
      }
    };

    private customSettings!: HTMLElement;
    private generateConfigBtn!: HTMLButtonElement;
    private copyConfigBtn!: HTMLButtonElement;
    private downloadConfigBtn!: HTMLButtonElement;
    private configOutput!: HTMLElement;

    constructor() {
      this.init();
    }

    private init(): void {
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.initElements());
      } else {
        this.initElements();
      }
    }

    private initElements(): void {
      // Get elements
      this.customSettings = document.getElementById('customSettings') as HTMLElement;
      this.generateConfigBtn = document.getElementById('generateConfigBtn') as HTMLButtonElement;
      this.copyConfigBtn = document.getElementById('copyConfigBtn') as HTMLButtonElement;
      this.downloadConfigBtn = document.getElementById('downloadConfigBtn') as HTMLButtonElement;
      this.configOutput = document.getElementById('configOutput') as HTMLElement;

      // Plugin selection
      document.querySelectorAll('.plugin-card').forEach(card => {
        card.addEventListener('click', () => {
          const plugin = (card as HTMLElement).dataset.plugin!;
          this.selectPlugin(plugin);
        });
      });

      // Preset selection - ARREGLADO
      document.querySelectorAll('.preset-card').forEach(card => {
        card.addEventListener('click', (e) => {
          e.preventDefault();
          const preset = (card as HTMLElement).dataset.preset!;
          console.log('Preset clicked:', preset); // Debug
          this.selectPreset(preset);
        });
      });

      // Buttons
      this.generateConfigBtn?.addEventListener('click', () => this.generateConfig());
      this.copyConfigBtn?.addEventListener('click', () => this.copyConfig());
      this.downloadConfigBtn?.addEventListener('click', () => this.downloadConfig());

      // Initialize
      this.loadSettings();
    }

    private selectPlugin(plugin: string): void {
      this.currentPlugin = plugin;
      console.log('Selected plugin:', plugin); // Debug
      
      // Update UI
      document.querySelectorAll('.plugin-card').forEach(card => {
        card.classList.remove('active');
      });
      document.querySelector(`[data-plugin="${plugin}"]`)?.classList.add('active');

      this.loadSettings();
      // Reset config output
      this.configOutput.innerHTML = '<div class="text-zinc-500 text-center py-8">Configure settings above to generate your config file</div>';
      if (this.copyConfigBtn) this.copyConfigBtn.disabled = true;
      if (this.downloadConfigBtn) this.downloadConfigBtn.disabled = true;
    }

    private selectPreset(preset: string): void {
      this.currentPreset = preset;
      console.log('Selected preset:', preset); // Debug
      
      // Update UI - ARREGLADO
      document.querySelectorAll('.preset-card').forEach(card => {
        card.classList.remove('active');
      });
      document.querySelector(`[data-preset="${preset}"]`)?.classList.add('active');

      // Apply preset values immediately
      this.applyPreset();
      
      // Show toast notification
      this.showToast(`Applied ${preset} preset`, 'success');
    }

    private loadSettings(): void {
      if (!this.customSettings) return;

      const config = this.configs[this.currentPlugin];
      if (!config) return;

      this.customSettings.innerHTML = config.settings.map(setting => {
        let inputHtml = '';
        
        switch (setting.type) {
          case 'boolean':
            inputHtml = `
              <label class="flex items-center cursor-pointer">
                <input type="checkbox" data-key="${setting.key}" ${setting.default ? 'checked' : ''} class="sr-only">
                <div class="toggle-switch"></div>
              </label>
            `;
            break;
          case 'number':
            inputHtml = `
              <input 
                type="number" 
                data-key="${setting.key}" 
                value="${setting.default}"
                class="w-full px-3 py-2 bg-obsidian-900 border border-zinc-700 rounded-lg text-white focus:border-white focus:outline-none transition-colors text-sm"
              />
            `;
            break;
          case 'select':
            inputHtml = `
              <select 
                data-key="${setting.key}"
                class="w-full px-3 py-2 bg-obsidian-900 border border-zinc-700 rounded-lg text-white focus:border-white focus:outline-none transition-colors text-sm"
              >
                ${setting.options?.map(option => 
                  `<option value="${option}" ${option === setting.default ? 'selected' : ''}>${option}</option>`
                ).join('')}
              </select>
            `;
            break;
          default:
            inputHtml = `
              <input 
                type="text" 
                data-key="${setting.key}" 
                value="${setting.default}"
                class="w-full px-3 py-2 bg-obsidian-900 border border-zinc-700 rounded-lg text-white placeholder-zinc-500 focus:border-white focus:outline-none transition-colors text-sm"
              />
            `;
        }

        return `
          <div class="space-y-2">
            <div class="flex justify-between items-center">
              <label class="text-sm font-medium text-zinc-300">${setting.label}</label>
              ${setting.type === 'boolean' ? inputHtml : ''}
            </div>
            <div class="text-xs text-zinc-400 mb-2">${setting.description}</div>
            ${setting.type !== 'boolean' ? inputHtml : ''}
          </div>
        `;
      }).join('');

      // Apply current preset after loading
      setTimeout(() => this.applyPreset(), 100);
    }

    private applyPreset(): void {
      // Apply preset-specific values - MEJORADO
      const presetValues: Record<string, Record<string, any>> = {
        survival: {
          'pvp': false,
          'mob-damage': true,
          'fire-spread': false,
          'view-distance': 8,
          'spawn-limits.monsters': 50,
          'teleport-cooldown': 5,
          'default-gamemode': 'survival',
          'protect-rails': true,
          'max-homes': 3
        },
        creative: {
          'pvp': false,
          'mob-damage': false,
          'fire-spread': false,
          'view-distance': 12,
          'default-gamemode': 'creative',
          'spawn-limits.monsters': 20,
          'teleport-cooldown': 0,
          'protect-rails': false,
          'max-homes': 10
        },
        minigames: {
          'pvp': true,
          'mob-damage': true,
          'view-distance': 6,
          'teleport-cooldown': 0,
          'spawn-limits.monsters': 30,
          'default-gamemode': 'adventure',
          'max-homes': 1,
          'save-user-cache-on-stop-only': true
        }
      };

      const values = presetValues[this.currentPreset] || {};
      
      // Update form values
      Object.entries(values).forEach(([key, value]) => {
        const input = document.querySelector(`[data-key="${key}"]`) as HTMLInputElement | HTMLSelectElement;
        if (input) {
          if (input.type === 'checkbox') {
            (input as HTMLInputElement).checked = value;
          } else {
            input.value = value.toString();
          }
          console.log(`Applied ${key} = ${value}`); // Debug
        }
      });
    }

    private generateConfig(): void {
      const config = this.configs[this.currentPlugin];
      if (!config) return;

      const values: Record<string, any> = {};
      
      // Collect all values
      config.settings.forEach(setting => {
        const input = document.querySelector(`[data-key="${setting.key}"]`) as HTMLInputElement;
        if (input) {
          if (setting.type === 'boolean') {
            values[setting.key] = input.checked;
          } else if (setting.type === 'number') {
            values[setting.key] = parseInt(input.value) || setting.default;
          } else {
            values[setting.key] = input.value || setting.default;
          }
        }
      });

      // Generate YAML config
      let configText = `# ${config.name} Configuration\n# Generated by NetherGuard - ${new Date().toISOString().split('T')[0]}\n# Preset: ${this.currentPreset}\n\n`;
      
      Object.entries(values).forEach(([key, value]) => {
        if (key.includes('.')) {
          // Handle nested keys
          const parts = key.split('.');
          configText += `${parts[0]}:\n  ${parts[1]}: ${this.formatYamlValue(value)}\n`;
        } else {
          configText += `${key}: ${this.formatYamlValue(value)}\n`;
        }
      });

      this.configOutput.textContent = configText;
      
      // Enable buttons
      if (this.copyConfigBtn) this.copyConfigBtn.disabled = false;
      if (this.downloadConfigBtn) this.downloadConfigBtn.disabled = false;

      this.showToast('Configuration generated successfully!', 'success');
    }

    private formatYamlValue(value: any): string {
      if (typeof value === 'string') {
        return `"${value}"`;
      }
      return value.toString();
    }

    private copyConfig(): void {
      const config = this.configOutput.textContent;
      if (!config) return;

      navigator.clipboard.writeText(config).then(() => {
        this.showToast('Configuration copied to clipboard', 'success');
      }).catch(() => {
        this.showToast('Failed to copy configuration', 'error');
      });
    }

    private downloadConfig(): void {
      const config = this.configOutput.textContent;
      if (!config) return;

      const pluginConfig = this.configs[this.currentPlugin];
      const filename = pluginConfig?.filename || 'config.yml';

      this.downloadFile(config, filename, 'text/yaml');
    }

    private downloadFile(content: string, filename: string, type: string): void {
      const blob = new Blob([content], { type: type });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      this.showToast(`Downloaded ${filename}`, 'success');
    }

    private showToast(message: string, type: 'success' | 'error' | 'info' = 'info'): void {
      const container = document.getElementById('toastContainer');
      if (!container) return;

      const toast = document.createElement('div');
      toast.className = `toast-${type} px-4 py-3 rounded-lg border text-white text-sm font-medium shadow-lg transform transition-all duration-300 translate-x-full`;
      
      const colors = {
        success: 'bg-white/20 border-white/30',
        error: 'bg-red-600/20 border-red-500/30',
        info: 'bg-white/20 border-white/30'
      };
      
      toast.className += ` ${colors[type]}`;
      toast.textContent = message;
      
      container.appendChild(toast);
      
      // Animate in
      setTimeout(() => {
        toast.classList.remove('translate-x-full');
      }, 10);
      
      // Remove after 3 seconds
      setTimeout(() => {
        toast.classList.add('translate-x-full');
        setTimeout(() => {
          if (container.contains(toast)) {
            container.removeChild(toast);
          }
        }, 300);
      }, 3000);
    }
  }

  // Initialize - ARREGLADO
  document.addEventListener('DOMContentLoaded', () => {
    new ConfigManager();
    console.log('Config Manager initialized'); // Debug
  });
</script>

<style>
  .plugin-card {
    @apply p-4 bg-obsidian-700/50 border border-zinc-800 rounded-xl text-center transition-all duration-200 hover:bg-obsidian-600/50 hover:border-zinc-700 cursor-pointer;
  }

  .plugin-card.active {
    @apply bg-white/10 border-white/20 transform scale-105;
  }

  .preset-card {
    @apply p-4 bg-obsidian-800/50 border border-zinc-800 rounded-lg text-left transition-all duration-200 hover:bg-obsidian-700/50 hover:border-zinc-700 cursor-pointer;
  }

  .preset-card.active {
    @apply bg-white/10 border-white/20;
  }

  .toggle-switch {
    @apply relative w-11 h-6 bg-zinc-600 rounded-full transition-colors duration-200;
  }

  .toggle-switch::after {
    content: '';
    @apply absolute top-0.5 left-0.5 w-5 h-5 bg-white rounded-full transition-transform duration-200;
  }

  input:checked + .toggle-switch {
    @apply bg-white;
  }

  input:checked + .toggle-switch::after {
    @apply transform translate-x-5 bg-obsidian-900;
  }
</style>
