---
import BaseLayout from '../layouts/BaseLayout.astro';
---

<BaseLayout title="Whitelist Generator - NetherGuard">
  <!-- Hero Section -->
  <section class="section-spacing bg-gradient-to-br from-obsidian-900 via-zinc-900/20 to-obsidian-900">
    <div class="container">
      <div class="max-w-4xl mx-auto text-center mb-12">
        <div class="text-sm text-zinc-500 font-mono mb-4">~/whitelist-generator</div>
        <h1 class="text-5xl md:text-6xl font-bold text-white mb-6 leading-tight">
          Whitelist <span class="text-white">Generator</span>
        </h1>
        <p class="text-xl text-zinc-400 max-w-2xl mx-auto leading-relaxed">
          Create secure Minecraft server whitelists with automatic UUID validation. 
          Supports bulk import and multiple export formats.
        </p>
      </div>
    </div>
  </section>

  <!-- Generator Section -->
  <section class="section-spacing bg-obsidian-800">
    <div class="container">
      <div class="max-w-4xl mx-auto">
        <!-- Input Methods -->
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-12">
          <!-- Manual Input -->
          <div class="bg-obsidian-700/50 border border-zinc-800 rounded-xl p-6">
            <h3 class="text-xl font-bold text-white mb-4 flex items-center gap-2">
              <div class="w-2 h-2 rounded-full bg-white"></div>
              Manual Input
            </h3>
            <p class="text-zinc-400 text-sm mb-6">Add usernames one by one</p>
            
            <div class="space-y-4">
              <div>
                <input 
                  type="text" 
                  id="usernameInput" 
                  placeholder="Enter Minecraft username"
                  class="w-full px-4 py-3 bg-obsidian-900 border border-zinc-700 rounded-lg text-white placeholder-zinc-500 focus:border-white focus:outline-none transition-colors"
                />
              </div>
              <button 
                id="addUserBtn"
                class="w-full px-6 py-3 bg-white hover:bg-zinc-200 text-black rounded-lg font-semibold transition-all duration-200 hover:scale-105"
              >
                Add User
              </button>
            </div>
          </div>

          <!-- Bulk Import -->
          <div class="bg-obsidian-700/50 border border-zinc-800 rounded-xl p-6">
            <h3 class="text-xl font-bold text-white mb-4 flex items-center gap-2">
              <div class="w-2 h-2 rounded-full bg-white"></div>
              Bulk Import
            </h3>
            <p class="text-zinc-400 text-sm mb-6">Upload a text file with usernames</p>
            
            <div 
              id="dropZone"
              class="border-2 border-dashed border-zinc-600 rounded-lg p-8 text-center cursor-pointer hover:border-white transition-colors"
            >
              <div class="text-zinc-400 mb-2">
                <div class="i-lucide-upload text-2xl mx-auto mb-2"></div>
                Drop a .txt file here or click to browse
              </div>
              <div class="text-xs text-zinc-500">One username per line</div>
              <input type="file" id="fileInput" accept=".txt" class="hidden" />
            </div>
          </div>
        </div>

        <!-- Users List -->
        <div class="bg-obsidian-700/50 border border-zinc-800 rounded-xl p-6 mb-8">
          <div class="flex justify-between items-center mb-6">
            <h3 class="text-xl font-bold text-white">Added Users</h3>
            <div class="flex gap-2">
              <button 
                id="validateAllBtn"
                class="px-4 py-2 bg-white/10 hover:bg-white/20 text-white rounded-lg text-sm font-medium transition-colors"
              >
                Validate All
              </button>
              <button 
                id="clearAllBtn"
                class="px-4 py-2 bg-white/10 hover:bg-white/20 text-white rounded-lg text-sm font-medium transition-colors"
              >
                Clear All
              </button>
            </div>
          </div>
          
          <div id="usersList" class="space-y-2 min-h-[100px] max-h-[400px] overflow-y-auto">
            <div class="text-zinc-500 text-center py-8">
              No users added yet. Add some usernames above.
            </div>
          </div>
        </div>

        <!-- Export Options -->
        <div class="bg-obsidian-700/50 border border-zinc-800 rounded-xl p-6">
          <h3 class="text-xl font-bold text-white mb-6">Export Options</h3>
          
          <div class="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
            <button 
              id="exportJsonBtn"
              class="export-btn px-6 py-4 bg-white/10 hover:bg-white/20 border border-white/20 rounded-lg text-white font-medium transition-all duration-200 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100"
              disabled
            >
              <div class="text-lg mb-1">JSON</div>
              <div class="text-xs text-zinc-400">For most plugins</div>
            </button>
            
            <button 
              id="exportYamlBtn"
              class="export-btn px-6 py-4 bg-white/10 hover:bg-white/20 border border-white/20 rounded-lg text-white font-medium transition-all duration-200 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100"
              disabled
            >
              <div class="text-lg mb-1">YAML</div>
              <div class="text-xs text-zinc-400">For config files</div>
            </button>
            
            <button 
              id="exportTxtBtn"
              class="export-btn px-6 py-4 bg-white/10 hover:bg-white/20 border border-white/20 rounded-lg text-white font-medium transition-all duration-200 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100"
              disabled
            >
              <div class="text-lg mb-1">TXT</div>
              <div class="text-xs text-zinc-400">Simple list</div>
            </button>
          </div>

          <div id="exportStatus" class="text-sm text-zinc-400 text-center">
            Add users to enable export options
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- How it Works -->
  <section class="section-spacing bg-obsidian-900">
    <div class="container">
      <div class="max-w-4xl mx-auto">
        <h2 class="text-3xl font-bold text-white text-center mb-12">How it works</h2>
        
        <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
          <div class="text-center">
            <div class="w-16 h-16 bg-white/10 rounded-xl flex items-center justify-center mx-auto mb-4">
              <div class="i-lucide-user-plus text-2xl text-white"></div>
            </div>
            <h3 class="text-xl font-bold text-white mb-2">Add Users</h3>
            <p class="text-zinc-400">Enter usernames manually or upload a text file with bulk usernames.</p>
          </div>
          
          <div class="text-center">
            <div class="w-16 h-16 bg-white/10 rounded-xl flex items-center justify-center mx-auto mb-4">
              <div class="i-lucide-shield-check text-2xl text-white"></div>
            </div>
            <h3 class="text-xl font-bold text-white mb-2">Validate</h3>
            <p class="text-zinc-400">We automatically fetch UUIDs from Mojang's API and validate usernames.</p>
          </div>
          
          <div class="text-center">
            <div class="w-16 h-16 bg-white/10 rounded-xl flex items-center justify-center mx-auto mb-4">
              <div class="i-lucide-download text-2xl text-white"></div>
            </div>
            <h3 class="text-xl font-bold text-white mb-2">Export</h3>
            <p class="text-zinc-400">Download your whitelist in JSON, YAML, or TXT format ready for your server.</p>
          </div>
        </div>
      </div>
    </div>
  </section>
</BaseLayout>

<script>
  interface User {
    username: string;
    uuid: string | null;
    status: 'pending' | 'validating' | 'valid' | 'invalid' | 'error';
    id: number;
  }

  class WhitelistGenerator {
    private users: User[] = [];
    private usernameInput!: HTMLInputElement;
    private addUserBtn!: HTMLButtonElement;
    private usersList!: HTMLElement;
    private dropZone!: HTMLElement;
    private fileInput!: HTMLInputElement;
    private validateAllBtn!: HTMLButtonElement;
    private clearAllBtn!: HTMLButtonElement;
    private exportBtns!: NodeListOf<HTMLButtonElement>;
    private exportStatus!: HTMLElement;

    constructor() {
      this.init();
    }

    private init(): void {
      // Wait for DOM to be fully loaded
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => this.initElements());
      } else {
        this.initElements();
      }
    }

    private initElements(): void {
      // Elements with proper null checks
      this.usernameInput = document.getElementById('usernameInput') as HTMLInputElement;
      this.addUserBtn = document.getElementById('addUserBtn') as HTMLButtonElement;
      this.usersList = document.getElementById('usersList') as HTMLElement;
      this.dropZone = document.getElementById('dropZone') as HTMLElement;
      this.fileInput = document.getElementById('fileInput') as HTMLInputElement;
      this.validateAllBtn = document.getElementById('validateAllBtn') as HTMLButtonElement;
      this.clearAllBtn = document.getElementById('clearAllBtn') as HTMLButtonElement;
      this.exportBtns = document.querySelectorAll('.export-btn') as NodeListOf<HTMLButtonElement>;
      this.exportStatus = document.getElementById('exportStatus') as HTMLElement;

      // Event listeners with null checks
      if (this.addUserBtn) {
        this.addUserBtn.addEventListener('click', () => this.addUser());
      }
      
      if (this.usernameInput) {
        this.usernameInput.addEventListener('keypress', (e) => {
          if (e.key === 'Enter') this.addUser();
        });
      }
      
      // Drag and drop
      if (this.dropZone) {
        this.dropZone.addEventListener('click', () => this.fileInput?.click());
        this.dropZone.addEventListener('dragover', this.handleDragOver.bind(this));
        this.dropZone.addEventListener('drop', this.handleDrop.bind(this));
      }
      
      if (this.fileInput) {
        this.fileInput.addEventListener('change', this.handleFileSelect.bind(this));
      }

      // Buttons
      if (this.validateAllBtn) {
        this.validateAllBtn.addEventListener('click', () => this.validateAllUsers());
      }
      
      if (this.clearAllBtn) {
        this.clearAllBtn.addEventListener('click', () => this.clearAll());
      }
      
      // Export buttons
      const exportJsonBtn = document.getElementById('exportJsonBtn');
      const exportYamlBtn = document.getElementById('exportYamlBtn');
      const exportTxtBtn = document.getElementById('exportTxtBtn');
      
      if (exportJsonBtn) {
        exportJsonBtn.addEventListener('click', () => this.exportJSON());
      }
      if (exportYamlBtn) {
        exportYamlBtn.addEventListener('click', () => this.exportYAML());
      }
      if (exportTxtBtn) {
        exportTxtBtn.addEventListener('click', () => this.exportTXT());
      }
    }

    private async addUser(username: string | null = null): Promise<void> {
      const user = username || this.usernameInput?.value.trim();
      if (!user) return;

      // Check if user already exists
      if (this.users.find(u => u.username.toLowerCase() === user.toLowerCase())) {
        this.showStatus('User already added', 'error');
        return;
      }

      // Add user with pending status
      const userObj: User = {
        username: user,
        uuid: null,
        status: 'pending',
        id: Date.now()
      };

      this.users.push(userObj);
      this.renderUsers();
      this.updateExportButtons();
      
      if (!username && this.usernameInput) {
        this.usernameInput.value = '';
      }

      // Validate immediately
      this.validateUser(userObj);
    }

    private async validateUser(userObj: User): Promise<void> {
      try {
        userObj.status = 'validating';
        this.renderUsers();

        const response = await fetch(`https://api.minecraftservices.com/minecraft/profile/lookup/name/{playername}`);
        
        if (response.ok) {
          const data = await response.json();
          userObj.uuid = data.id;
          userObj.status = 'valid';
        } else {
          userObj.status = 'invalid';
        }
      } catch (error) {
        userObj.status = 'error';
      }
      
      this.renderUsers();
    }

    private async validateAllUsers(): Promise<void> {
      const pendingUsers = this.users.filter(u => u.status === 'pending' || u.status === 'error');
      
      for (const user of pendingUsers) {
        await this.validateUser(user);
        // Small delay to not overwhelm the API
        await new Promise(resolve => setTimeout(resolve, 100));
      }
    }

    private renderUsers(): void {
      if (!this.usersList) return;

      if (this.users.length === 0) {
        this.usersList.innerHTML = `
          <div class="text-zinc-500 text-center py-8">
            No users added yet. Add some usernames above.
          </div>
        `;
        return;
      }

      this.usersList.innerHTML = this.users.map(user => `
        <div class="flex items-center justify-between p-3 bg-obsidian-800/50 rounded-lg">
          <div class="flex items-center gap-3">
            <div class="status-indicator status-${user.status}"></div>
            <div>
              <div class="text-white font-medium">${user.username}</div>
              ${user.uuid ? `<div class="text-xs text-zinc-400 font-mono">${user.uuid}</div>` : ''}
            </div>
          </div>
          <div class="flex items-center gap-2">
            <span class="status-text status-${user.status}">${this.getStatusText(user.status)}</span>
            <button onclick="window.whitelistGen?.removeUser(${user.id})" class="text-zinc-400 hover:text-white">
              <div class="i-lucide-x text-sm"></div>
            </button>
          </div>
        </div>
      `).join('');
    }

    private getStatusText(status: User['status']): string {
      const statusMap = {
        'pending': 'Pending',
        'validating': 'Validating...',
        'valid': 'Valid',
        'invalid': 'Invalid',
        'error': 'Error'
      };
      return statusMap[status] || status;
    }

    public removeUser(id: number): void {
      this.users = this.users.filter(u => u.id !== id);
      this.renderUsers();
      this.updateExportButtons();
    }

    private clearAll(): void {
      this.users = [];
      this.renderUsers();
      this.updateExportButtons();
    }

    private updateExportButtons(): void {
      const hasValidUsers = this.users.some(u => u.status === 'valid');
      
      if (this.exportBtns) {
        this.exportBtns.forEach(btn => {
          btn.disabled = !hasValidUsers;
        });
      }

      if (this.exportStatus) {
        if (hasValidUsers) {
          this.exportStatus.textContent = `Ready to export ${this.users.filter(u => u.status === 'valid').length} valid users`;
        } else {
          this.exportStatus.textContent = 'Add users to enable export options';
        }
      }
    }

    // File handling
    private handleDragOver(e: DragEvent): void {
      e.preventDefault();
      if (this.dropZone) {
        this.dropZone.classList.add('border-white');
      }
    }

    private handleDrop(e: DragEvent): void {
      e.preventDefault();
      if (this.dropZone) {
        this.dropZone.classList.remove('border-white');
      }
      const files = e.dataTransfer?.files;
      if (files && files.length > 0) {
        this.processFile(files[0]);
      }
    }

    private handleFileSelect(e: Event): void {
      const input = e.target as HTMLInputElement;
      if (input.files && input.files.length > 0) {
        this.processFile(input.files[0]);
      }
    }

    private async processFile(file: File): Promise<void> {
      if (!file.name.endsWith('.txt')) {
        this.showStatus('Please select a .txt file', 'error');
        return;
      }

      const text = await file.text();
      const usernames = text.split('\n')
        .map(line => line.trim())
        .filter(line => line && !line.startsWith('#'));

      for (const username of usernames) {
        await this.addUser(username);
      }

      this.showStatus(`Added ${usernames.length} users from file`, 'success');
    }

    // Export functions
    private exportJSON(): void {
      const validUsers = this.users.filter(u => u.status === 'valid');
      const whitelist = validUsers.map(u => ({
        uuid: u.uuid,
        name: u.username
      }));

      this.downloadFile(JSON.stringify(whitelist, null, 2), 'whitelist.json', 'application/json');
    }

    private exportYAML(): void {
      const validUsers = this.users.filter(u => u.status === 'valid');
      let yaml = '# Minecraft Whitelist\n# Generated by NetherGuard\nwhitelist:\n';
      
      validUsers.forEach(u => {
        yaml += `  - uuid: "${u.uuid}"\n    name: "${u.username}"\n`;
      });

      this.downloadFile(yaml, 'whitelist.yml', 'text/yaml');
    }

    private exportTXT(): void {
      const validUsers = this.users.filter(u => u.status === 'valid');
      const txt = validUsers.map(u => u.username).join('\n');

      this.downloadFile(txt, 'whitelist.txt', 'text/plain');
    }

    private downloadFile(content: string, filename: string, type: string): void {
      const blob = new Blob([content], { type: type });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = filename;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);

      this.showStatus(`Downloaded ${filename}`, 'success');
    }

    private showStatus(message: string, type: string = 'info'): void {
      console.log(`${type.toUpperCase()}: ${message}`);
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    (window as any).whitelistGen = new WhitelistGenerator();
  });
</script>

<style>
  .status-indicator {
    width: 8px;
    height: 8px;
    border-radius: 50%;
    flex-shrink: 0;
  }

  .status-pending { background-color: #6b7280; }
  .status-validating { background-color: #f59e0b; animation: pulse 2s infinite; }
  .status-valid { background-color: #10b981; }
  .status-invalid { background-color: #ef4444; }
  .status-error { background-color: #ef4444; }

  .status-text {
    font-size: 0.75rem;
    text-transform: uppercase;
    font-weight: 500;
    letter-spacing: 0.05em;
  }

  .status-text.status-pending { color: #9ca3af; }
  .status-text.status-validating { color: #f59e0b; }
  .status-text.status-valid { color: #10b981; }
  .status-text.status-invalid { color: #ef4444; }
  .status-text.status-error { color: #ef4444; }

  @keyframes pulse {
    0%, 100% { opacity: 1; }
    50% { opacity: 0.5; }
  }
</style>
